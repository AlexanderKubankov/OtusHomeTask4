{
	"info": {
		"_postman_id": "5e43831b-da37-4eb2-9d2c-a2dd1030554d",
		"name": "home_task_4",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32179647",
		"_collection_link": "https://dark-water-708362.postman.co/workspace/New-Team-Workspace~d59b887e-cb25-41ad-b871-67e3e00398a6/collection/32179647-5e43831b-da37-4eb2-9d2c-a2dd1030554d?action=share&source=collection_link&creator=32179647"
	},
	"item": [
		{
			"name": "POST test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is ok, response is json\", function () {\r",
							"    pm.response.to.be.ok;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.environment.set(\"userId\", pm.response.json().id);\r",
							"console.log('seeded userId');"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"username\": \"test\",\r\n  \"firstName\": \"firstName\",\r\n  \"lastName\": \"lastName\",\r\n  \"email\": \"test@example.com\",\r\n  \"phone\": \"123456\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://arch.homework/users",
					"protocol": "http",
					"host": [
						"arch",
						"homework"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is ok, response is json\", function () {\r",
							"    pm.response.to.be.ok;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"userId from env is equal to userId from response\", function () {\r",
							"    pm.expect(parseInt(pm.environment.get(\"userId\"))).to.equal(\r",
							"        pm.response.json().id\r",
							"    );\r",
							"});\r",
							"\r",
							"pm.test(\"user fields are equal to changed values\", function () {\r",
							"    pm.expect('test').to.equal(pm.response.json().username);\r",
							"    pm.expect('firstName').to.equal(pm.response.json().firstName);\r",
							"    pm.expect('lastName').to.equal(pm.response.json().lastName);\r",
							"    pm.expect('test@example.com').to.equal(pm.response.json().email);\r",
							"    pm.expect('123456').to.equal(pm.response.json().phone);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://arch.homework/users/{{userId}}",
					"protocol": "http",
					"host": [
						"arch",
						"homework"
					],
					"path": [
						"users",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is ok\", function () {\r",
							"    pm.response.to.be.ok;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"username\": \"test2\",\r\n  \"firstName\": \"firstName2\",\r\n  \"lastName\": \"lastName2\",\r\n  \"email\": \"test2@example.com\",\r\n  \"phone\": \"1234567\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://arch.homework/users/{{userId}}",
					"protocol": "http",
					"host": [
						"arch",
						"homework"
					],
					"path": [
						"users",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET changed test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is ok, response is json\", function () {\r",
							"    pm.response.to.be.ok;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"userId from env is equal to userId from response\", function () {\r",
							"    pm.expect(parseInt(pm.environment.get(\"userId\"))).to.equal(\r",
							"        pm.response.json().id\r",
							"    );\r",
							"});\r",
							"\r",
							"pm.test(\"user fields are equal to changed values\", function () {\r",
							"    pm.expect('test2').to.equal(pm.response.json().username);\r",
							"    pm.expect('firstName2').to.equal(pm.response.json().firstName);\r",
							"    pm.expect('lastName2').to.equal(pm.response.json().lastName);\r",
							"    pm.expect('test2@example.com').to.equal(pm.response.json().email);\r",
							"    pm.expect('1234567').to.equal(pm.response.json().phone);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://arch.homework/users/{{userId}}",
					"protocol": "http",
					"host": [
						"arch",
						"homework"
					],
					"path": [
						"users",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is ok\", function () {\r",
							"    pm.response.to.be.ok;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://arch.homework/users/{{userId}}",
					"protocol": "http",
					"host": [
						"arch",
						"homework"
					],
					"path": [
						"users",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET deleted test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is ok\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://arch.homework/users/{{userId}}",
					"protocol": "http",
					"host": [
						"arch",
						"homework"
					],
					"path": [
						"users",
						"{{userId}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}